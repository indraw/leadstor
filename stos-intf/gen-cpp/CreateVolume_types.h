/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CreateVolume_TYPES_H
#define CreateVolume_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class CreateVolumeArgs;

typedef struct _CreateVolumeArgs__isset {
  _CreateVolumeArgs__isset() : sizeMB(true), volumeName(false), mirrors(false), comment(false) {}
  bool sizeMB :1;
  bool volumeName :1;
  bool mirrors :1;
  bool comment :1;
} _CreateVolumeArgs__isset;

class CreateVolumeArgs {
 public:

  static const char* ascii_fingerprint; // = "50EF4F1F90146F91D9FC19646E6EFA71";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0xEF,0x4F,0x1F,0x90,0x14,0x6F,0x91,0xD9,0xFC,0x19,0x64,0x6E,0x6E,0xFA,0x71};

  CreateVolumeArgs(const CreateVolumeArgs&);
  CreateVolumeArgs& operator=(const CreateVolumeArgs&);
  CreateVolumeArgs() : sizeMB(0), volumeName(), mirrors(0), comment() {
  }

  virtual ~CreateVolumeArgs() throw();
  int32_t sizeMB;
  std::string volumeName;
  int32_t mirrors;
  std::string comment;

  _CreateVolumeArgs__isset __isset;

  void __set_sizeMB(const int32_t val);

  void __set_volumeName(const std::string& val);

  void __set_mirrors(const int32_t val);

  void __set_comment(const std::string& val);

  bool operator == (const CreateVolumeArgs & rhs) const
  {
    if (!(sizeMB == rhs.sizeMB))
      return false;
    if (!(volumeName == rhs.volumeName))
      return false;
    if (!(mirrors == rhs.mirrors))
      return false;
    if (__isset.comment != rhs.__isset.comment)
      return false;
    else if (__isset.comment && !(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const CreateVolumeArgs &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateVolumeArgs & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CreateVolumeArgs& obj);
};

void swap(CreateVolumeArgs &a, CreateVolumeArgs &b);



#endif
