/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "CreateVolume_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




CreateVolumeArgs::~CreateVolumeArgs() throw() {
}


void CreateVolumeArgs::__set_sizeMB(const int32_t val) {
  this->sizeMB = val;
}

void CreateVolumeArgs::__set_volumeName(const std::string& val) {
  this->volumeName = val;
}

void CreateVolumeArgs::__set_mirrors(const int32_t val) {
  this->mirrors = val;
}

void CreateVolumeArgs::__set_comment(const std::string& val) {
  this->comment = val;
__isset.comment = true;
}

const char* CreateVolumeArgs::ascii_fingerprint = "50EF4F1F90146F91D9FC19646E6EFA71";
const uint8_t CreateVolumeArgs::binary_fingerprint[16] = {0x50,0xEF,0x4F,0x1F,0x90,0x14,0x6F,0x91,0xD9,0xFC,0x19,0x64,0x6E,0x6E,0xFA,0x71};

uint32_t CreateVolumeArgs::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sizeMB);
          this->__isset.sizeMB = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->volumeName);
          this->__isset.volumeName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mirrors);
          this->__isset.mirrors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateVolumeArgs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CreateVolumeArgs");

  xfer += oprot->writeFieldBegin("sizeMB", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sizeMB);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("volumeName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->volumeName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mirrors", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->mirrors);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.comment) {
    xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->comment);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CreateVolumeArgs &a, CreateVolumeArgs &b) {
  using ::std::swap;
  swap(a.sizeMB, b.sizeMB);
  swap(a.volumeName, b.volumeName);
  swap(a.mirrors, b.mirrors);
  swap(a.comment, b.comment);
  swap(a.__isset, b.__isset);
}

CreateVolumeArgs::CreateVolumeArgs(const CreateVolumeArgs& other0) {
  sizeMB = other0.sizeMB;
  volumeName = other0.volumeName;
  mirrors = other0.mirrors;
  comment = other0.comment;
  __isset = other0.__isset;
}
CreateVolumeArgs& CreateVolumeArgs::operator=(const CreateVolumeArgs& other1) {
  sizeMB = other1.sizeMB;
  volumeName = other1.volumeName;
  mirrors = other1.mirrors;
  comment = other1.comment;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CreateVolumeArgs& obj) {
  using apache::thrift::to_string;
  out << "CreateVolumeArgs(";
  out << "sizeMB=" << to_string(obj.sizeMB);
  out << ", " << "volumeName=" << to_string(obj.volumeName);
  out << ", " << "mirrors=" << to_string(obj.mirrors);
  out << ", " << "comment="; (obj.__isset.comment ? (out << to_string(obj.comment)) : (out << "<null>"));
  out << ")";
  return out;
}


