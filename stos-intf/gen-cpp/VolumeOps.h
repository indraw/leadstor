/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef VolumeOps_H
#define VolumeOps_H

#include <thrift/TDispatchProcessor.h>
#include "CreateVolume_types.h"



class VolumeOpsIf {
 public:
  virtual ~VolumeOpsIf() {}
  virtual int32_t CreateVolume(const CreateVolumeArgs& cva) = 0;
};

class VolumeOpsIfFactory {
 public:
  typedef VolumeOpsIf Handler;

  virtual ~VolumeOpsIfFactory() {}

  virtual VolumeOpsIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(VolumeOpsIf* /* handler */) = 0;
};

class VolumeOpsIfSingletonFactory : virtual public VolumeOpsIfFactory {
 public:
  VolumeOpsIfSingletonFactory(const boost::shared_ptr<VolumeOpsIf>& iface) : iface_(iface) {}
  virtual ~VolumeOpsIfSingletonFactory() {}

  virtual VolumeOpsIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(VolumeOpsIf* /* handler */) {}

 protected:
  boost::shared_ptr<VolumeOpsIf> iface_;
};

class VolumeOpsNull : virtual public VolumeOpsIf {
 public:
  virtual ~VolumeOpsNull() {}
  int32_t CreateVolume(const CreateVolumeArgs& /* cva */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _VolumeOps_CreateVolume_args__isset {
  _VolumeOps_CreateVolume_args__isset() : cva(false) {}
  bool cva :1;
} _VolumeOps_CreateVolume_args__isset;

class VolumeOps_CreateVolume_args {
 public:

  static const char* ascii_fingerprint; // = "1DCCC07A9F1CB079B37B9C5CC8579F1E";
  static const uint8_t binary_fingerprint[16]; // = {0x1D,0xCC,0xC0,0x7A,0x9F,0x1C,0xB0,0x79,0xB3,0x7B,0x9C,0x5C,0xC8,0x57,0x9F,0x1E};

  VolumeOps_CreateVolume_args(const VolumeOps_CreateVolume_args&);
  VolumeOps_CreateVolume_args& operator=(const VolumeOps_CreateVolume_args&);
  VolumeOps_CreateVolume_args() {
  }

  virtual ~VolumeOps_CreateVolume_args() throw();
  CreateVolumeArgs cva;

  _VolumeOps_CreateVolume_args__isset __isset;

  void __set_cva(const CreateVolumeArgs& val);

  bool operator == (const VolumeOps_CreateVolume_args & rhs) const
  {
    if (!(cva == rhs.cva))
      return false;
    return true;
  }
  bool operator != (const VolumeOps_CreateVolume_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VolumeOps_CreateVolume_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VolumeOps_CreateVolume_args& obj);
};


class VolumeOps_CreateVolume_pargs {
 public:

  static const char* ascii_fingerprint; // = "1DCCC07A9F1CB079B37B9C5CC8579F1E";
  static const uint8_t binary_fingerprint[16]; // = {0x1D,0xCC,0xC0,0x7A,0x9F,0x1C,0xB0,0x79,0xB3,0x7B,0x9C,0x5C,0xC8,0x57,0x9F,0x1E};


  virtual ~VolumeOps_CreateVolume_pargs() throw();
  const CreateVolumeArgs* cva;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VolumeOps_CreateVolume_pargs& obj);
};

typedef struct _VolumeOps_CreateVolume_result__isset {
  _VolumeOps_CreateVolume_result__isset() : success(false) {}
  bool success :1;
} _VolumeOps_CreateVolume_result__isset;

class VolumeOps_CreateVolume_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  VolumeOps_CreateVolume_result(const VolumeOps_CreateVolume_result&);
  VolumeOps_CreateVolume_result& operator=(const VolumeOps_CreateVolume_result&);
  VolumeOps_CreateVolume_result() : success(0) {
  }

  virtual ~VolumeOps_CreateVolume_result() throw();
  int32_t success;

  _VolumeOps_CreateVolume_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const VolumeOps_CreateVolume_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VolumeOps_CreateVolume_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VolumeOps_CreateVolume_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VolumeOps_CreateVolume_result& obj);
};

typedef struct _VolumeOps_CreateVolume_presult__isset {
  _VolumeOps_CreateVolume_presult__isset() : success(false) {}
  bool success :1;
} _VolumeOps_CreateVolume_presult__isset;

class VolumeOps_CreateVolume_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~VolumeOps_CreateVolume_presult() throw();
  int32_t* success;

  _VolumeOps_CreateVolume_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VolumeOps_CreateVolume_presult& obj);
};

class VolumeOpsClient : virtual public VolumeOpsIf {
 public:
  VolumeOpsClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  VolumeOpsClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t CreateVolume(const CreateVolumeArgs& cva);
  void send_CreateVolume(const CreateVolumeArgs& cva);
  int32_t recv_CreateVolume();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class VolumeOpsProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<VolumeOpsIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (VolumeOpsProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_CreateVolume(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  VolumeOpsProcessor(boost::shared_ptr<VolumeOpsIf> iface) :
    iface_(iface) {
    processMap_["CreateVolume"] = &VolumeOpsProcessor::process_CreateVolume;
  }

  virtual ~VolumeOpsProcessor() {}
};

class VolumeOpsProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  VolumeOpsProcessorFactory(const ::boost::shared_ptr< VolumeOpsIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< VolumeOpsIfFactory > handlerFactory_;
};

class VolumeOpsMultiface : virtual public VolumeOpsIf {
 public:
  VolumeOpsMultiface(std::vector<boost::shared_ptr<VolumeOpsIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~VolumeOpsMultiface() {}
 protected:
  std::vector<boost::shared_ptr<VolumeOpsIf> > ifaces_;
  VolumeOpsMultiface() {}
  void add(boost::shared_ptr<VolumeOpsIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t CreateVolume(const CreateVolumeArgs& cva) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CreateVolume(cva);
    }
    return ifaces_[i]->CreateVolume(cva);
  }

};



#endif
