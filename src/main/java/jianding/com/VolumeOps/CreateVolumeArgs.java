/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package jianding.com.VolumeOps;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-5-31")
public class CreateVolumeArgs implements org.apache.thrift.TBase<CreateVolumeArgs, CreateVolumeArgs._Fields>, java.io.Serializable, Cloneable, Comparable<CreateVolumeArgs> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateVolumeArgs");

  private static final org.apache.thrift.protocol.TField SIZE_MB_FIELD_DESC = new org.apache.thrift.protocol.TField("sizeMB", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField VOLUME_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("volumeName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MIRRORS_FIELD_DESC = new org.apache.thrift.protocol.TField("mirrors", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CreateVolumeArgsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CreateVolumeArgsTupleSchemeFactory());
  }

  public int sizeMB; // required
  public String volumeName; // required
  public int mirrors; // required
  public String comment; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SIZE_MB((short)1, "sizeMB"),
    VOLUME_NAME((short)2, "volumeName"),
    MIRRORS((short)3, "mirrors"),
    COMMENT((short)4, "comment");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SIZE_MB
          return SIZE_MB;
        case 2: // VOLUME_NAME
          return VOLUME_NAME;
        case 3: // MIRRORS
          return MIRRORS;
        case 4: // COMMENT
          return COMMENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SIZEMB_ISSET_ID = 0;
  private static final int __MIRRORS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COMMENT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SIZE_MB, new org.apache.thrift.meta_data.FieldMetaData("sizeMB", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VOLUME_NAME, new org.apache.thrift.meta_data.FieldMetaData("volumeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MIRRORS, new org.apache.thrift.meta_data.FieldMetaData("mirrors", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateVolumeArgs.class, metaDataMap);
  }

  public CreateVolumeArgs() {
    this.sizeMB = 0;

  }

  public CreateVolumeArgs(
    int sizeMB,
    String volumeName,
    int mirrors)
  {
    this();
    this.sizeMB = sizeMB;
    setSizeMBIsSet(true);
    this.volumeName = volumeName;
    this.mirrors = mirrors;
    setMirrorsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CreateVolumeArgs(CreateVolumeArgs other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sizeMB = other.sizeMB;
    if (other.isSetVolumeName()) {
      this.volumeName = other.volumeName;
    }
    this.mirrors = other.mirrors;
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
  }

  public CreateVolumeArgs deepCopy() {
    return new CreateVolumeArgs(this);
  }

  @Override
  public void clear() {
    this.sizeMB = 0;

    this.volumeName = null;
    setMirrorsIsSet(false);
    this.mirrors = 0;
    this.comment = null;
  }

  public int getSizeMB() {
    return this.sizeMB;
  }

  public CreateVolumeArgs setSizeMB(int sizeMB) {
    this.sizeMB = sizeMB;
    setSizeMBIsSet(true);
    return this;
  }

  public void unsetSizeMB() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIZEMB_ISSET_ID);
  }

  /** Returns true if field sizeMB is set (has been assigned a value) and false otherwise */
  public boolean isSetSizeMB() {
    return EncodingUtils.testBit(__isset_bitfield, __SIZEMB_ISSET_ID);
  }

  public void setSizeMBIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIZEMB_ISSET_ID, value);
  }

  public String getVolumeName() {
    return this.volumeName;
  }

  public CreateVolumeArgs setVolumeName(String volumeName) {
    this.volumeName = volumeName;
    return this;
  }

  public void unsetVolumeName() {
    this.volumeName = null;
  }

  /** Returns true if field volumeName is set (has been assigned a value) and false otherwise */
  public boolean isSetVolumeName() {
    return this.volumeName != null;
  }

  public void setVolumeNameIsSet(boolean value) {
    if (!value) {
      this.volumeName = null;
    }
  }

  public int getMirrors() {
    return this.mirrors;
  }

  public CreateVolumeArgs setMirrors(int mirrors) {
    this.mirrors = mirrors;
    setMirrorsIsSet(true);
    return this;
  }

  public void unsetMirrors() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MIRRORS_ISSET_ID);
  }

  /** Returns true if field mirrors is set (has been assigned a value) and false otherwise */
  public boolean isSetMirrors() {
    return EncodingUtils.testBit(__isset_bitfield, __MIRRORS_ISSET_ID);
  }

  public void setMirrorsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MIRRORS_ISSET_ID, value);
  }

  public String getComment() {
    return this.comment;
  }

  public CreateVolumeArgs setComment(String comment) {
    this.comment = comment;
    return this;
  }

  public void unsetComment() {
    this.comment = null;
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SIZE_MB:
      if (value == null) {
        unsetSizeMB();
      } else {
        setSizeMB((Integer)value);
      }
      break;

    case VOLUME_NAME:
      if (value == null) {
        unsetVolumeName();
      } else {
        setVolumeName((String)value);
      }
      break;

    case MIRRORS:
      if (value == null) {
        unsetMirrors();
      } else {
        setMirrors((Integer)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SIZE_MB:
      return Integer.valueOf(getSizeMB());

    case VOLUME_NAME:
      return getVolumeName();

    case MIRRORS:
      return Integer.valueOf(getMirrors());

    case COMMENT:
      return getComment();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SIZE_MB:
      return isSetSizeMB();
    case VOLUME_NAME:
      return isSetVolumeName();
    case MIRRORS:
      return isSetMirrors();
    case COMMENT:
      return isSetComment();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CreateVolumeArgs)
      return this.equals((CreateVolumeArgs)that);
    return false;
  }

  public boolean equals(CreateVolumeArgs that) {
    if (that == null)
      return false;

    boolean this_present_sizeMB = true;
    boolean that_present_sizeMB = true;
    if (this_present_sizeMB || that_present_sizeMB) {
      if (!(this_present_sizeMB && that_present_sizeMB))
        return false;
      if (this.sizeMB != that.sizeMB)
        return false;
    }

    boolean this_present_volumeName = true && this.isSetVolumeName();
    boolean that_present_volumeName = true && that.isSetVolumeName();
    if (this_present_volumeName || that_present_volumeName) {
      if (!(this_present_volumeName && that_present_volumeName))
        return false;
      if (!this.volumeName.equals(that.volumeName))
        return false;
    }

    boolean this_present_mirrors = true;
    boolean that_present_mirrors = true;
    if (this_present_mirrors || that_present_mirrors) {
      if (!(this_present_mirrors && that_present_mirrors))
        return false;
      if (this.mirrors != that.mirrors)
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_sizeMB = true;
    list.add(present_sizeMB);
    if (present_sizeMB)
      list.add(sizeMB);

    boolean present_volumeName = true && (isSetVolumeName());
    list.add(present_volumeName);
    if (present_volumeName)
      list.add(volumeName);

    boolean present_mirrors = true;
    list.add(present_mirrors);
    if (present_mirrors)
      list.add(mirrors);

    boolean present_comment = true && (isSetComment());
    list.add(present_comment);
    if (present_comment)
      list.add(comment);

    return list.hashCode();
  }

  @Override
  public int compareTo(CreateVolumeArgs other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSizeMB()).compareTo(other.isSetSizeMB());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSizeMB()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sizeMB, other.sizeMB);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolumeName()).compareTo(other.isSetVolumeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolumeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volumeName, other.volumeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMirrors()).compareTo(other.isSetMirrors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMirrors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mirrors, other.mirrors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CreateVolumeArgs(");
    boolean first = true;

    sb.append("sizeMB:");
    sb.append(this.sizeMB);
    first = false;
    if (!first) sb.append(", ");
    sb.append("volumeName:");
    if (this.volumeName == null) {
      sb.append("null");
    } else {
      sb.append(this.volumeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mirrors:");
    sb.append(this.mirrors);
    first = false;
    if (isSetComment()) {
      if (!first) sb.append(", ");
      sb.append("comment:");
      if (this.comment == null) {
        sb.append("null");
      } else {
        sb.append(this.comment);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CreateVolumeArgsStandardSchemeFactory implements SchemeFactory {
    public CreateVolumeArgsStandardScheme getScheme() {
      return new CreateVolumeArgsStandardScheme();
    }
  }

  private static class CreateVolumeArgsStandardScheme extends StandardScheme<CreateVolumeArgs> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CreateVolumeArgs struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SIZE_MB
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sizeMB = iprot.readI32();
              struct.setSizeMBIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VOLUME_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.volumeName = iprot.readString();
              struct.setVolumeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MIRRORS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mirrors = iprot.readI32();
              struct.setMirrorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comment = iprot.readString();
              struct.setCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CreateVolumeArgs struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SIZE_MB_FIELD_DESC);
      oprot.writeI32(struct.sizeMB);
      oprot.writeFieldEnd();
      if (struct.volumeName != null) {
        oprot.writeFieldBegin(VOLUME_NAME_FIELD_DESC);
        oprot.writeString(struct.volumeName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MIRRORS_FIELD_DESC);
      oprot.writeI32(struct.mirrors);
      oprot.writeFieldEnd();
      if (struct.comment != null) {
        if (struct.isSetComment()) {
          oprot.writeFieldBegin(COMMENT_FIELD_DESC);
          oprot.writeString(struct.comment);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CreateVolumeArgsTupleSchemeFactory implements SchemeFactory {
    public CreateVolumeArgsTupleScheme getScheme() {
      return new CreateVolumeArgsTupleScheme();
    }
  }

  private static class CreateVolumeArgsTupleScheme extends TupleScheme<CreateVolumeArgs> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CreateVolumeArgs struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSizeMB()) {
        optionals.set(0);
      }
      if (struct.isSetVolumeName()) {
        optionals.set(1);
      }
      if (struct.isSetMirrors()) {
        optionals.set(2);
      }
      if (struct.isSetComment()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSizeMB()) {
        oprot.writeI32(struct.sizeMB);
      }
      if (struct.isSetVolumeName()) {
        oprot.writeString(struct.volumeName);
      }
      if (struct.isSetMirrors()) {
        oprot.writeI32(struct.mirrors);
      }
      if (struct.isSetComment()) {
        oprot.writeString(struct.comment);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CreateVolumeArgs struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.sizeMB = iprot.readI32();
        struct.setSizeMBIsSet(true);
      }
      if (incoming.get(1)) {
        struct.volumeName = iprot.readString();
        struct.setVolumeNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mirrors = iprot.readI32();
        struct.setMirrorsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.comment = iprot.readString();
        struct.setCommentIsSet(true);
      }
    }
  }

}

